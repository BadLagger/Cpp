#ifndef BASESMANUALWINDOW_H
#define BASESMANUALWINDOW_H

#include <QMainWindow>
#include <QTimer>
#include <QMessageBox>
#include "progresswindow.h"
#include "additionalsetswindow.h"

#define BASESMANUALWINDOW_UPDATE_TIMER 200

namespace Ui {
class BasesManualWindow;
}
/* Описание класса */
/*!
 * \brief Класс окна для ввода значений расстояний между базами вручную
 ***********************************************************************************/
class BasesManualWindow : public QMainWindow
{
    Q_OBJECT
public:
    /* Открытые структуры */
    //! \brief Структура для обмена информацией о базах и расположении блоков
    typedef struct{
        QString pos;    // расположение в строковом виде: "соосно", "паралельно", "соосно развёрнуто"
        double  base1;
        double  base2;
        double  base3;
    }BASESINFO, *BASESINFOptr;
    /*Открытые члены */
    explicit BasesManualWindow(QWidget *parent = nullptr);
    /*!
     * \brief     Деструктор класса InfoWindow
     ***********************************************************************************/
    ~BasesManualWindow();
    /*!
     * \brief     Запуск окна
     * \remark    Окно блокирует остальные окна до закрытия
     * \param[in] структура на информацию для отображения (текущее расположение и базы)
     ***********************************************************************************/
    void startWindow(BASESINFO info);
    /*!
     * \brief     Окночание калибровки
     ***********************************************************************************/
    void endCalibration();
    /*!
     * \brief     Закрытие окна в случа возникновения ошибки
     ***********************************************************************************/
    void unexpectedShutdown();
    /*!
     * \brief     Установка статуса соединения
     * \param[in] статус: true - соединение установлено
     ***********************************************************************************/
    void connectionStatus(bool status);
    /*!
     * \brief     Установка статуса калибровки
     * \param[in] 0-99 - значение статуса калибровки
     ***********************************************************************************/
    void calibrationStatus(int val);
    /*!
     * \brief     Сигнал о запросе статуса калибровки
     ***********************************************************************************/
    void setsBlockTypeConfirm();
    /* Сигналы */
signals:
    /*!
     * \brief     Сигнал о нажатии кнопки установить новое значение баз
     * \param[in] структура со значениями баз которые необходимо установить
     ***********************************************************************************/
    void setBasesValues(BASESINFO val);
    /*!
     * \brief     Сигнал о нажатии кнопки запуска калибровки
     ***********************************************************************************/
    void startCalibration();
    /*!
     * \brief     Сигнал о нажатии кнопки отмены калибровки
     ***********************************************************************************/
    void cancelCalibration();
    /*!
     * \brief     Сигнал об подверждении начала калибровки
     ***********************************************************************************/
    void startCalibrationConfirm();
    /*!
     * \brief     Сигнал об отмене калибровки
     ***********************************************************************************/
    void cancelCalibrationConfirm();
    /*!
     * \brief     Сигнал о запросе статуса соединения
     ***********************************************************************************/
    void connectionStatusRequestSignal();
    /*!
     * \brief     Сигнал о запросе статуса калибровки
     ***********************************************************************************/
    void requestCalibrationStatusSignal();
    /*
     * \brief Сигнал об установки типа блока
     * \param[in] false - ведомый сзади, true - ведомый впереди
     ***********************************************************************************/
    void requestBlockTypeSignal(bool set);
private:
    /* Закрытые члены */
    Ui::BasesManualWindow *ui;                //! указатель на форму окна
    ProgressWindow        *calibrationWindow; //! указатель на окно прогресса калибровки
    AdditionalSetsWindow  *addSetsWindow;     //! окно для ввода дополнительных настроек положения блока
    QMessageBox           *calibrationMsgBox; //! указатель на окно предупреждения перед калибровкой
    QTimer                *updateTimer;       //! таймер автообновления окна
    bool                  sendSetBlock;       //! флаг отправки запроса на установку расположения блоков
    /* Закрытые методы */
    /*!
     * \brief     Вывод предупреждающего окна перед началом калибровки (ЗАКРЫТЫЙ МЕТОД)
     ***********************************************************************************/
    void showPreCalibrationWarningWindow();
};

#endif // BASESMANUALWINDOW_H
