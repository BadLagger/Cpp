#ifndef COMPORT_H
#define COMPORT_H

#include <QPushButton>
#include <QComboBox>
#include <QObject>
#include <QtSerialPort/QSerialPortInfo>
#include <QSerialPort>

class ComPort : public QSerialPort
{
    Q_OBJECT

    bool                     state;             //! false - порт отключен, true - порт включен
    QPushButton              *connectBtn;       //! Кнопка подключения/отключения порта
    QComboBox                *portListCbox;     //! Комбобокс списока порта
    QString                  connectBtnTxt;     //! Текст кнопки при АКТИВНОМ состоянии
    QString                  disconnectBtnTxt;  //! Текст кнопки при НЕАКТИВНОМ состоянии
    QList<QSerialPortInfo>   portList;          //! Список портов отображаемых в комбобоксе
    QTimer                   *portUpdateTimer;  //! Таймер для обновления списка портов в комбобоксе
    QString                  lastErrorStr;      //! Строка с описанием последней возникшей ошибки в работе порта
    QSerialPort::DataBits    dataBits;          //! Текущая настройка длинны слова порта (битность)
    int                      baudRate;          //! Текущая настройка скорости порта
    QSerialPort::FlowControl flowControl;       //! Текущая настройка усправления потоком порта
    QSerialPort::Parity      parity;            //! Текущая настройка чет/нечет порта

    /* Открытые методы */
public:
   /*!
    * \brief     Конструктор класса ComPort
    * \param[in] пользовательская кнопка отвечающая за подключение и отключение порта
    * \param[in] пользовательский комбобокс отвечающий за отображения списка доступных портов
    ***********************************************************************************/
    ComPort(QPushButton *userBtn, QComboBox *userCbox);
   /*!
    * \brief Установка текста для отображения на кнопке при НЕАКТИВНОМ подключении
    * \param[in] строка текста для отображения на кнопке
    ***********************************************************************************/
    void setDisconnectBtnText(const QString str);
    /*!
     * \brief Установка текста для отображения на кнопке при АКТИВНОМ подключении
     * \param[in] строка текста для отображения на кнопке
    ***********************************************************************************/
    void setConnectBtnText(const QString str);
    /*!
     * \brief      Установка настройки длины слова порта (битность)
     * \remark     Использовать вместо setDataBits
     * \param[in]  битность
    ***********************************************************************************/
    void setDatabits(QSerialPort::DataBits bits);
    /*!
     * \brief      Установка настройки скорости порта
     * \remark     Использовать вместо setBaudRate
     * \param[in]  скорость
    ***********************************************************************************/
    void setBaudrate(int brate);
    /*!
     * \brief      Установка настройки управления потоком порта
     * \remark     Использовать вместо setFlowControl
     * \param[in]  признак управления потоком
    ***********************************************************************************/
    void setFlowcontol(QSerialPort::FlowControl flowctrl);
    /*!
     * \brief      Установка настройки чет/нечет порта
     * \remark     Использовать вместо setParity
     * \param[in]  признак управления потоком
    ***********************************************************************************/
    void setParitet(QSerialPort::Parity parity);
    /*!
     * \brief  Открытие порта (Закрытый метод)
    ***********************************************************************************/
    void openPort();
    /*!
     * \brief  Закрытие порта (Закрытый метод)
    ***********************************************************************************/
    void closePort();
    /*!
     * \brief      Получение текущего значения битности данных порта
     * \return     битность
    ***********************************************************************************/
    QSerialPort::DataBits getDatabits() const;
    /*!
     * \brief      Получение текущего значения скорости порта
     * \return     скорость
    ***********************************************************************************/
    int getBaudrate() const;
    /*!
     * \brief      Получение текущего настройки управления потоком порта
     * \return     признак управления потоком
    ***********************************************************************************/
    QSerialPort::FlowControl getFlowcontrol() const;
    /*!
     * \brief      Получение текущего значения чет/нечет порта
     * \return     битность
    ***********************************************************************************/
    QSerialPort::Parity getParitet() const;
    /*!
     * \brief  Получение текущего состояния подключения
     * \return true - если порт подключен, false - если порт отключен
    ***********************************************************************************/
    bool getState() const;
    /*!
     * \brief  Получение информации о последней возникшей ошибки
     * \return текст с описанием проблемы
    ***********************************************************************************/
    QString getLastErrMsg() const;

    /* Сигналы */
signals:
    /*!
     * \brief  Сигнал об ошибке в процессе работы порта
    ***********************************************************************************/
    void errorSignal();
    /*!
     * \brief  Сигнал об открытии порта
    ***********************************************************************************/
    void openSignal();
    /*!
     * \brief  Сигнал о закрытии порта
    ***********************************************************************************/
    void closeSignal();
    /*!
     * \brief  Сигнал о нажатии кнопки подключения/отключения
     * \remark Вызывается до действия подключения/отключения (для добавления пред обработки)
    ***********************************************************************************/
    void userClicked();

    /* Закрытые методы */
private:
    /*!
     * \brief  Попытка установить подключение (Закрытый метод)
    ***********************************************************************************/
    void tryToConnect();
    /* Ограничение доступа к методам родительского класса */
    using QSerialPort::open;
    using QSerialPort::close;
    using QSerialPort::setPortName;
    using QSerialPort::setDataBits;
    using QSerialPort::setBaudRate;
    using QSerialPort::setFlowControl;
    using QSerialPort::setParity;
};

#endif // COMPORT_H
