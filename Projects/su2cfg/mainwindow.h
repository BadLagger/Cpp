#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include <QTimer>
#include <QThread>
#include <QLabel>
#include "comport.h"
#include "bcp2.h"
#include "nmea.h"
#include "cbytearraytextedit.h"
#include "modecfg.h"
#include "masterslavewidget.h"
#include "baseswidget.h"

namespace Ui {
class MainWindow;
}

//! \brief Максимальный размер таблицы с настройками портов для перебора скоростей
#define MAX_PORT_SPEED_TAB_SIZE 28
//! \brief Количество повторных запросов при переборе скоростей
#define SEEK_CONN_ATEMPTS_MAX 3

//! \brief Список протоклов для таблицы настроек портов
typedef enum
{
    WmPortProtocolTypes_BCP2 = 0,
    WmPortProtocolTypes_NMEA,
    WmPortProtocolTypes_Max
}WmPortProtocolTypes;
//! \brief Структура элемента таблицы настроек портов
typedef struct
{
    unsigned long       speed;
    WmPortProtocolTypes protocol;
}WMPORTSETS, *WMPORTSETSptr;
//! \brief Вспомогательная структура для объединения лейблов портов
//! \remark Возможно стоит включить в класс ComPort или в какой-то производный от него класс
typedef struct
{
    QLabel *speed;
    QLabel *protocol;
}WMPORTLABEL, *WMPORTLABELptr;

//! \brief Вспомогательная структура для объединения комбобоксов портов
//! \remark Возможно стоит включить в класс ComPort или в какой-то производный от него класс
typedef struct
{
    QComboBox *speed;
    QComboBox *protocol;
}WMPORTCBOX, *WMPORTCBOXptr;

//! \brief Вспомогательная структура для управления портом (визуализация + обработка)
//! \remark Возможно стоит включить в класс ComPort или в какой-то производный от него класс
typedef struct
{
   QString     name;
   Bcp2::Ports bcp2Id;
   NmeaPortIds nmeaId;
   WMPORTLABEL label;
   WMPORTCBOX  cbox;
}MWPORTELEMET, *MWPORTELEMETptr;

/* Описание класса */
/*!
 * \brief Класс главного окна приложения
 ***********************************************************************************/
class MainWindow : public QMainWindow
{
    Q_OBJECT

    Ui::MainWindow     *ui;                //! Указатель на класс ГУИ
    QTimer             *seekConnTimer;     //! Таймер для перебора скоростей
    QTimer             *dbgPrintTimer;     //! Таймер для вывода дебага
    QTimer             *waitAnswerTimer;   //! Таймер ожидания ответа на запрос или команду
    ComPort            *port;              //! Порт
    int                portSpeedIndex;     //! Индекс для перебора скоростей порта при установке обмена
    bool               connSuccess;        //! Флаг удачно установленного соединения
    bool               seekTimerState;     //! Флаг активности таймера перебора скоростей
    bool               startSynchro;       //! Флаг старта синхронизации
    Bcp2               *bcp2;              //! Обработчик BCP2
    Nmea               *nmea;              //! Обработчик NMEA
    MWPORTELEMET       port1;              //! Вспомогательная структура с информацией об элементах порта 1
    MWPORTELEMET       port2;              //! Вспомогательная структура с информацией об элементах порта 2
    WMPORTSETSptr      portCurrentSets;    //! Текущие настройки порта
#ifdef QT_DEBUG
    CByteArrayTextEdit *outDialog;         //! Интерфейс для вывода принятых байт пользователю (только для дебага)
    CByteArrayTextEdit *inDialog;          //! Интерфейс для вывода переданных байт байт пользователю (только для дебага)
#endif
    int                seekConnAttempts;   //! Количество попыток запроса версии при синхронизации
    WMPORTSETS         reconnectSettings;  //! Структура для хранения настроек порта при переподключении
    ModeCfg            *modeCfg;           //! Объект для обеспечения функционирования элемента "Режима работы"
    MasterSlaveWidget  msWidget;           //! Объект для графического отображения блоков СУ 02
    BasesWidget        basesWidget;        //! Объект для графического отображения информации о базах
    /* Открытые методы */
public:
   /*!
    * \brief     Конструктор класса MainWindow
    * \remark    Основные связи элементов ГУИ и логики приложения находятся здесь
    * \param[in] указатель на родительский виджет
    ***********************************************************************************/
    explicit MainWindow(QWidget *parent = nullptr);
    /*!
     * \brief     Деструктор класса MainWindow
     ***********************************************************************************/
    ~MainWindow();
    /*!
     * \brief     Установка значения комбобокса по заданной строке
     * \remark    метод находит заданную строку в списке комбобокса, и если строка найдена
     *            то устанавливает текущее значение комбобокса этой строкой
     * \param[in] указатель на комбобокс к котором будет осуществлён поиск
     * \param[in] строка которую необходимо искать в списке комбобокса и устанавливать
     ***********************************************************************************/
    void setComboxValueByStr(QComboBox *cbox, QString str);
    /*!
     * \brief     Попытка поменять установки порта
     * \param[in] ссылка на вспомогательную структуру порта
     ***********************************************************************************/
    void tryChangePortSettings(MWPORTELEMET &port);
    /*!
     * \brief     Установка комбобоксов отвечающих за порт в активное состояние
     * \param[in] ссылка на вспомогательную структуру порта
     ***********************************************************************************/
    void setCboxEnable(MWPORTELEMET &port);
    /*!
     * \brief     Установка комбобоксов отвечающих за порт в неактивное состояние
     * \param[in] ссылка на вспомогательную структуру порта
     ***********************************************************************************/
    void setCboxDisable(MWPORTELEMET &port);
    /*!
     * \brief     Обновление содержимого лейблов порта
     * \param[in] ссылка на вспомогательную структуру порта
     * \param[in] ссылка на структуру с информацией о настройках порта
     ***********************************************************************************/
    void updatePortLabelContextBySets(MWPORTELEMET &port, Bcp2::PORTSETS &portSets);

    /* Закрытые методы */
private:
    /*!
     * \brief     Инициализация элементов и логики COM порта (ЗАКРЫТЫЙ МЕТОД)
     ***********************************************************************************/
    void comPortInitialization();
    /*!
     * \brief     Инициализация элементов и логики BCP2 (ЗАКРЫТЫЙ МЕТОД)
     ***********************************************************************************/
    void bcp2Initialization();
    /*!
     * \brief     Инициализация элементов и логики NMEA (ЗАКРЫТЫЙ МЕТОД)
     ***********************************************************************************/
    void nmeaInitialization();
    /*!
     * \brief     Инициализация элементов и логики спец. графических элементов для отображения устройств СУ 02 (ЗАКРЫТЫЙ МЕТОД)
     ***********************************************************************************/
    void su2GraphicalElementsInitialization();
    /*!
     * \brief     Инициализация элементов и логики графических элементов для отображения информации о базах (ЗАКРЫТЫЙ МЕТОД)
     ***********************************************************************************/
    void su2BasesElementsInitialization();
    /*!
     * \brief     Инициализация элементов и логики отладочного режима (ЗАКРЫТЫЙ МЕТОД)
     ***********************************************************************************/
    void dbgInitialization();
    /*!
     * \brief     Начало синхронизации (ЗАКРЫТЫЙ МЕТОД)
     * \todo      возможно необходимо пересмотреть и переделать
     ***********************************************************************************/
    void StartSynchronization();
    /*!
     * \brief     Попытка установить настройки из таблицы настроек портов с учётом протокола (ЗАКРЫТЫЙ МЕТОД)
     * \todo      Пересмотреть. Возможно слишком много входящих параметров для закрытого метода
     * \param[in] указатель на объект порта
     * \param[in] указатель на начало таблицы настроек
     * \param[in] размер таблицы настроек
     * \param[in] индекс элемента таблицы которого необходимо установить
     * \return    true - в случае успеха, false - в случае неудачи
     ***********************************************************************************/
    bool tryPortSets(ComPort *port, WMPORTSETSptr setsTab, int setsTabSize, int currentTabIndex);
    /*!
     * \brief     Получение индекса из таблицы настроек портов согласно заданым настройкам (ЗАКРЫТЫЙ МЕТОД)
     * \todo      Пересмотреть. Возвращаемое значание не очевидно в случае неудачи
     * \param[in] ссылка на структуру с задаными настройками
     * \return    индекс из таблицы настроек, либо максимальный размер таблицы
     ***********************************************************************************/
    int getPortSettingsTabIndex(WMPORTSETS &sets) const;
    /*!
     * \brief     Преобразует идентификатор расположения блоков из BCP2 в индекс элемента комбобокса(ЗАКРЫТЫЙ МЕТОД)
     * \param[in] идентификатор расположения блоков BCP2
     * \return    индекс элемента комбобокса
     ***********************************************************************************/
    ModeCfg::Positions modeCfgPositionFromBcp2WorkMode(Bcp2::Workmodes id);
    /*!
     * \brief     Преобразует настройки режима работы СУ2 из структуры в байтовое поле данных для BCP2(ЗАКРЫТЫЙ МЕТОД)
     * \param[in] структура с настройками режима
     * \return    байт данных для отправки по протоколу BCP2 в составе сообщения \ref setWorkModeRequest
     ***********************************************************************************/
    unsigned char bcp2WorkModeFromModeCfg(ModeCfg::MODECFG cfg);
    /*!
     * \brief     Попытка установить настройки режима работы для СУ 02 (ЗАКРЫТЫЙ МЕТОД)
     * \param[in] структура с настройками режима работы
     ***********************************************************************************/
    void trySetWorkMode(ModeCfg::MODECFG cfg);
    /*!
     * \brief     Попытка установить конфигурацию антенны для СУ 02 (ЗАКРЫТЫЙ МЕТОД)
     * \param[in] длина первой базы в метрах
     * \param[in] длина второй базы в метрах
     * \param[in] длина третьей базы в метрах
     ***********************************************************************************/
    void trySetAntennaCfg(double base1, double base2, double base3);
    /*!
     * \brief     Установить значения баз в графическом интерфейсе при коллинеарном размещении
     ***********************************************************************************/
    void setBasesCollinearValues();
    /*!
     * \brief     Установить значения баз в графическом интерфейсе при паралельном размещении
     ***********************************************************************************/
    void setBasesParallelValues();
};

#endif // MAINWINDOW_H
