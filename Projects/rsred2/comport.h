#ifndef COMPORT_H
#define COMPORT_H

#include <QPushButton>
#include <QComboBox>
#include <QObject>
#include <QtSerialPort/QSerialPortInfo>
#include <QSerialPort>

/* Описание класса */
/*!
 * \brief  Класс-адаптер для предоставления интерфейса взаимодействия
 *         COM-порта и интерфейса пользователя
 ***********************************************************************************/
class ComPort : public QSerialPort
{
    Q_OBJECT

    QTimer                   *portUpdateTimer;  //! Таймер для обновления списка портов в комбобоксе
    //QSerialPort::DataBits    dataBits;          //! Текущая настройка длинны слова порта (битность)
    //QSerialPort::FlowControl flowControl;       //! Текущая настройка усправления потоком порта

    /* Открытые методы */
public:
   /*!
    * \brief     Конструктор класса ComPort
    * \param[in] пользовательская кнопка отвечающая за подключение и отключение порта
    * \param[in] пользовательский комбобокс отвечающий за отображения списка доступных портов
    ***********************************************************************************/
    ComPort(QComboBox *cbox);
    /*!
     * \brief     Установка комбобокса для выбора скорости порта
     * \param[in] указатель на внешний комбобокс
     ***********************************************************************************/
    void setSpeedCbox(QComboBox *cbox);
    /*!
     * \brief     Установка комбобокса для выбора чётности
     * \param[in] указатель на внешний комбобокс
     ***********************************************************************************/
    void setParityCbox(QComboBox *cbox);
    /*!
     * \brief     Установка комбобокса для выбора битности
     * \param[in] указатель на внешний комбобокс
     ***********************************************************************************/
    void setBitCbox(QComboBox *cbox);
    /*!
     * \brief     Установка комбобокса для стопбитов
     * \param[in] указатель на внешний комбобокс
     ***********************************************************************************/
    void setStopCbox(QComboBox *cbox);
    /*!
     * \brief     Установка комбобокса для управления потоком
     * \param[in] указатель на внешний комбобокс
     ***********************************************************************************/
    void setFlowCbox(QComboBox *cbox);
    /*!
     * \brief  Открытие порта (Закрытый метод)
    ***********************************************************************************/
    void openPort();
    /*!
     * \brief  Закрытие порта (Закрытый метод)
    ***********************************************************************************/
    void closePort();

    /* Сигналы */
signals:
    /*!
     * \brief  Сигнал об ошибке в процессе работы порта
    ***********************************************************************************/
    void errorSignal(QString err);
    /*!
     * \brief  Сигнал об открытии порта
    ***********************************************************************************/
    void openSignal();
    /*!
     * \brief  Сигнал о закрытии порта
    ***********************************************************************************/
    void closeSignal();

    /* Закрытые методы */
private:
    QComboBox *portlist;     //! Комбобокс списка порта
    QComboBox *speed;        //! Комбобокс списка скоростей
    QComboBox *paritylist;   //! Комбобокс списка чётности
    QComboBox *bitlist;      //! Комбобокс списка битности
    QComboBox *stoplist;      //! Комбобокс списка стопбитов
    QComboBox *flowlist;      //! Комбобокс списка управления потоком

    QList<QSerialPortInfo>   portList;          //! Список портов отображаемых в комбобоксе
    /*int                      baudRate;          //! Текущая настройка скорости порта
    QSerialPort::Parity      parity;            //! Текущая настройка чет/нечет порта*/
    /*!
     * \brief  Попытка установить подключение (Закрытый метод)
    ***********************************************************************************/
    void tryToConnect();
    /* Ограничение доступа к методам родительского класса */
    using QSerialPort::open;
    using QSerialPort::close;
    using QSerialPort::setPortName;
    using QSerialPort::setDataBits;
    using QSerialPort::setBaudRate;
    using QSerialPort::setFlowControl;
    using QSerialPort::setParity;
};

#endif // COMPORT_H
